import { NextResponse } from 'next/server';

// For√ßar renderiza√ß√£o din√¢mica
export const dynamic = 'force-dynamic';

// Cache simples em mem√≥ria para evitar m√∫ltiplas requisi√ß√µes
let cachedData: any = null;
let lastFetch = 0;
const CACHE_DURATION = 120000; // 2 minutos de cache para reduzir carga

export async function GET() {
  try {
    const now = Date.now();
    
    // Se temos dados em cache e ainda s√£o v√°lidos, retornar do cache
    if (cachedData && (now - lastFetch) < CACHE_DURATION) {
      console.log('üì¶ Retornando dados do cache:', cachedData.currentSong);
      return NextResponse.json({
        ...cachedData,
        fromCache: true,
        cacheAge: now - lastFetch
      });
    }
    
    console.log('üéµ Buscando dados da r√°dio via /played.html...');
    
    // Credentials para acessar o painel da r√°dio
    const credentials = Buffer.from('admin:784512235689').toString('base64');
    
    // Fazer requisi√ß√£o para o endpoint /played.html que tem as m√∫sicas
    const response = await fetch('http://82.145.41.50:16784/played.html', {
      headers: {
        'Authorization': `Basic ${credentials}`,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Connection': 'keep-alive'
      },
      cache: 'no-store', // Sempre buscar dados frescos
      signal: AbortSignal.timeout(8000) // Reduzir timeout para 8 segundos
    });

    console.log(`üì° Response status: ${response.status}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const html = await response.text();
    console.log(`üìÑ HTML recebido (${html.length} chars)`);
    
    // Extrair m√∫sicas do HTML baseado na estrutura real da tabela
    let currentSong = 'R√°dio Tatuap√© FM';
    const recentSongs = [];
    
    console.log('üîç Extraindo m√∫sicas da tabela HTML...');
    
    // Extrair m√∫sicas baseado na estrutura HTML real (com tags <td>)
    // Primeiro, buscar pela m√∫sica atual (linha com "Current Song")
    const currentSongMatch = html.match(/(\d{2}:\d{2}:\d{2})<\/td><td>([^<]+)<td><b>Current Song<\/b>/);
    if (currentSongMatch) {
      currentSong = currentSongMatch[2].trim();
      console.log('üéµ M√∫sica atual encontrada:', currentSong);
    }
    
    // Extrair todas as m√∫sicas usando a estrutura HTML correta
    const songRegex = /(\d{2}:\d{2}:\d{2})<\/td><td>([^<]+)/gi;
    let match;
    
    while ((match = songRegex.exec(html)) !== null && recentSongs.length < 5) {
      const time = match[1];
      const title = match[2].trim();
      const isCurrent = html.includes(`${time}</td><td>${title}<td><b>Current Song</b>`);
      
      // Filtrar entradas v√°lidas (ignorar cabe√ßalhos e texto irrelevante)
      if (title && title.length > 3 && 
          !title.includes('Song Title') && 
          !title.includes('Played @') &&
          !title.includes('Written by') &&
          !title.includes('SHOUTcast')) {
        
        recentSongs.push({
          title,
          time,
          isCurrent: isCurrent
        });
        
        console.log(`üéµ Hist√≥rico [${recentSongs.length}]: ${time} - ${title}${isCurrent ? ' (ATUAL)' : ''}`);
      }
    }
    
    console.log('üéµ Extra√ß√£o conclu√≠da:');
    console.log('üéµ M√∫sica atual:', currentSong);
    console.log('üéµ Hist√≥rico:', recentSongs);
    
    // Contar quantas m√∫sicas foram tocadas (cada linha com timestamp)
    const songLines = html.match(/\d{2}:\d{2}:\d{2}\s+.+/g) || [];
    const songsCount = songLines.length;
    
    console.log(`üéº Total de ${songsCount} m√∫sicas no hist√≥rico`);
    console.log(`üéµ Extra√≠das ${recentSongs.length} m√∫sicas recentes:`, recentSongs);

    // Dados extra√≠dos
    const radioData = {
      currentSong,
      serverStatus: 'Online',
      streamStatus: 'Ao Vivo',
      listeners: 0, // Esse endpoint n√£o tem info de listeners
      recentSongs, // Adicionar o hist√≥rico de m√∫sicas
      lastUpdated: new Date().toISOString(),
      debug: {
        responseStatus: response.status,
        htmlLength: html.length,
        songsInHistory: songsCount,
        foundCurrentSong: currentSong !== 'R√°dio Tatuap√© FM',
        recentSongsCount: recentSongs.length
      }
    };

    console.log('‚úÖ Dados extra√≠dos:', radioData);
    
    // Salvar no cache
    cachedData = radioData;
    lastFetch = now;
    
    return NextResponse.json(radioData);
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar status da r√°dio:', error);
    
    // Retornar dados padr√£o em caso de erro
    const fallbackData = {
      currentSong: 'R√°dio Tatuap√© FM - Ao Vivo',
      serverStatus: 'Online',
      streamStatus: 'Ao Vivo',
      listeners: 0,
      recentSongs: [], // Array vazio para evitar erros
      lastUpdated: new Date().toISOString(),
      error: `Erro: ${error instanceof Error ? error.message : 'Desconhecido'}`,
      debug: {
        errorType: error instanceof Error ? error.name : 'Unknown',
        errorMessage: error instanceof Error ? error.message : String(error)
      }
    };
    
    console.log('‚ö†Ô∏è Retornando dados fallback:', fallbackData);
    return NextResponse.json(fallbackData);
  }
}
